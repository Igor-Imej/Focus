git config --global user.name "Igor Dobric" - set username of person who makes changes to git
git config --global user.email igordobricc@gmail.com - set email
git config --global init.default branch main - edit default branch name
git config -h - shows all git config options
git help config - opens offline html manual with commands for more details
git init - make current folder main repository
git status - status of repository, untracked files will be shown, changed files will be shown
git add main.py - track a file
git rm --cached main.py - untrack file
in file explorer create .gitignore, add file names you dont want git to see, https://github.com/github/gitignore to see list of commands
git add --all / git add -A / git add . - multiple ways to track all files
git commit -m "first commit" - take a snapshot of current code
git diff - see differences in current and changed file
---------
3 stages:
1. working files - files you are working on 
2. staging - git add files that arent yet commited
3. commit - submit files
---------
git restore --staged main.py - remove staging file and move it back to working files
git commit -a -m "updated" - skip staging and commit all
git rm "main.py" - delete file, status will stil remember file if its being tracked
git restore "main.py" - restore file
git mv "one.txt" "two.txt" - rename file
git log - see all the commits, author, date of commit and message
git log --oneline - see all commits without additional info
git commit -m "small change on alst commit" --amend - updates last commit without making new git commit entry
git log -p - detailed changes
q - leave
git help log - see all log options
git reset c193894 - revert changes
git rebase -i --root - opens editor to change how commits look and how they are ordered, watch additional tutorial on this
git branch main2 - create exact copy of main branch with all the commit entries and history, later it can be merged with main brainch
git switch -c main3 - create and switch to new branch
git branch - see all branches and currently active branch
git switch main2 - switch branch
---------
if we switch to main2 and edit a file and then we switch back to main the modified 
file in file explorer will not be modified on main but will be on main2 every time we 
switch branches files will update to represent current branch
---------
git merge -m "Merged main2" main2 - merge main2 with main
git branch -d main2 - delete branch
if main branch was changed before main2 was merged merge conflict will occur
in file <<<<HEAD === >>>>UPDATE text will be placed, below HEAD will be text thats currently in main and below UPDATE will be text that is on branch, we need to delete one of those texts to resolve conflict
git commit after resolving conflict
================================================================================================================================================================================================
CONNECT WITH GITHUB ACCOUNT
create new repository
git init
git add README.md
git commit -m "First Commit"
git branch -M main
git remote add origin https://github.com/Igor-Imej/Focus.git
git push -u origin main

push an existing repository
git remote add origin https://github.com/Igor-Imej/Focus.git - establish remote connection with github and call it origin (common name) 
git branch -M main - set target branch to main
git push -u origin main - push target branch main to remote connection origin

If you have a local clone, you can update it by running the following commands.
git branch -m main mains
git fetch origin
git branch -u origin/mains mains
git remote set-head origin -a

Github pages
code - where code is found
issues - requests for new features and bug reports, you can assign issues to team members, label it and etc.
 you can directlly change code from github and commit it to main or create new branch
 pull requests - when changes are made you can submit pull request for owner to review and merge your 
 code with   main
 when reviewing you can assign pull request to issue so when you merge issue will be removed and pull will
 be merged
actions - write programs to manage your repository
projects - project managment view, view all your issues pull requests and more
wiki - document your code, create wikipedia for your code
security - decide what happens when certain things occur
insights - who contributed, how much traffic does your project have, how many closed issues how many pulls etc. 
settings - settings of project, add people to project as contributors
releases - create new releases
===========================================================================
git push --all - push all branches to github
git fetch - download all history from remote tracking branches
git merge - merge changes and download files
git pull - git fetch and git merge in one command
git checkout branch-name - get other branches
git pull origin branch-name - get and pull other branches
git clean -fd - clean files and directories that are untracked
git clean -f - clean untracked files

 





